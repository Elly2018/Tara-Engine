[System] Tara initialization start
[System] Debug level: 1
[System] Debug filename: log.txt
[System] Tara initialization end
[System] fonts/OpenSans-Bold.ttf 129784 119808
[System] fonts/OpenSans-BoldItalic.ttf 135108 134656
[System] fonts/OpenSans-ExtraBold.ttf 130180 108044
[System] fonts/OpenSans-ExtraBoldItalic.ttf 135688 108800
[System] fonts/OpenSans-Italic.ttf 135380 134656
[System] fonts/OpenSans-Light.ttf 129756 103553
[System] fonts/OpenSans-LightItalic.ttf 135668 130560
[System] fonts/OpenSans-Medium.ttf 129948 129792
[System] fonts/OpenSans-MediumItalic.ttf 135556 133376
[System] fonts/OpenSans-Regular.ttf 129796 119296
[System] fonts/OpenSans-SemiBold.ttf 129716 119296
[System] fonts/OpenSans-SemiBoldItalic.ttf 135512 131072
[System] icon/arrow.png 678 0
[System] icon/audio.png 3176 0
[System] icon/audiowave.png 354 0
[System] icon/camera.png 2534 0
[System] icon/close.png 1055 0
[System] icon/colorwheel.png 3974 0
[System] icon/icons8-3d-model-96.png 1893 0
[System] icon/icons8-copy-to-clipboard-96.png 1378 0
[System] icon/icons8-cut-96.png 3700 0
[System] icon/icons8-delete-96.png 1212 0
[System] icon/icons8-document-96.png 476 0
[System] icon/icons8-done-96.png 982 0
[System] icon/icons8-doughnut-chart-96.png 2588 0
[System] icon/icons8-edit-96.png 1293 0
[System] icon/icons8-feed-in-96.png 1571 0
[System] icon/icons8-file-explorer-96.png 805 0
[System] icon/icons8-game-controller-96.png 3156 0
[System] icon/icons8-help-96.png 2753 0
[System] icon/icons8-info-96.png 2059 0
[System] icon/icons8-json-96.png 1963 0
[System] icon/icons8-key-96.png 1397 0
[System] icon/icons8-landscape-96.png 1813 0
[System] icon/icons8-layers-96.png 1822 0
[System] icon/icons8-light-96.png 2441 0
[System] icon/icons8-load-from-file-96.png 928 0
[System] icon/icons8-loading-circle.gif 18791 18330
[System] icon/icons8-lock-96.png 1512 0
[System] icon/icons8-menu-96.png 215 0
[System] icon/icons8-mute-96.png 1147 0
[System] icon/icons8-notification-96.png 2102 0
[System] icon/icons8-opened-folder-96.png 1064 0
[System] icon/icons8-paste-96.png 1282 0
[System] icon/icons8-pause-96.png 236 0
[System] icon/icons8-play-96.png 393 0
[System] icon/icons8-project-management-96.png 4818 0
[System] icon/icons8-refresh-96.png 2261 0
[System] icon/icons8-refresh.gif 26861 18612
[System] icon/icons8-sand-clock-96.png 1902 0
[System] icon/icons8-save-96.png 695 0
[System] icon/icons8-screenshot-96.png 1535 0
[System] icon/icons8-services-96.png 2929 0
[System] icon/icons8-settings-96.png 3621 0
[System] icon/icons8-source-code-96.png 2546 0
[System] icon/icons8-stop-96.png 228 0
[System] icon/icons8-synchronize-96.png 2897 0
[System] icon/icons8-synchronize.gif 65737 51701
[System] icon/icons8-tree-structure-96.png 681 0
[System] icon/icons8-unavailable-96.png 2372 0
[System] icon/icons8-upload-to-the-cloud-96.png 1473 0
[System] icon/icons8-upload-to-the-cloud.gif 28242 19183
[System] image/Default.png 165263 131072
[System] image/Grid.png 163868 154938
[System] image/sky/back.jpg 740068 720896
[System] image/sky/bottom.jpg 280589 265478
[System] image/sky/front.jpg 473329 468001
[System] image/sky/left.jpg 601885 589824
[System] image/sky/right.jpg 538038 524288
[System] image/sky/top.jpg 346139 340196
[System] lang/en/commom.xml 385 0
[System] lang/en/editor.xml 153 0
[System] lang/en/error.xml 148 0
[System] lang/en/material.xml 63 0
[System] lang/en/sceneobject.xml 38 0
[System] lang/en/shader.xml 38 0
[System] material/DefaultSky.json 1324 0
[System] mesh/Cone.mtl 124 0
[System] mesh/Cone.obj 4426 0
[System] mesh/Cube.mtl 229 0
[System] mesh/Cube.obj 951 0
[System] mesh/Cylinder.mtl 124 0
[System] mesh/Cylinder.obj 7387 0
[System] mesh/Monkey.mtl 124 0
[System] mesh/Monkey.obj 63088 0
[System] mesh/Plane.mtl 124 0
[System] mesh/Plane.obj 353 0
[System] mesh/Quad.mtl 124 0
[System] mesh/Quad.obj 365 0
[System] mesh/Sphere.mtl 124 0
[System] mesh/Sphere.obj 62254 0
[System] shader/base/Light.glsl 2126 0
[System] shader/base/Model.glsl 317 0
[System] shader/base/Utility.glsl 87 0
[System] shader/Blinn.frag 2125 0
[System] shader/Blinn.vert 736 0
[System] shader/Color.frag 387 0
[System] shader/Color.vert 463 0
[System] shader/DefaultPostProcess.frag 435 0
[System] shader/DefaultPostProcess.vert 227 0
[System] shader/DirectionalShadow.frag 82 0
[System] shader/DirectionalShadow.vert 403 0
[System] shader/Error.frag 221 0
[System] shader/Error.vert 231 0
[System] shader/GGX.frag 171 0
[System] shader/GGX.vert 710 0
[System] shader/Lambert.frag 1892 0
[System] shader/Lambert.vert 736 0
[System] shader/Normal.frag 314 0
[System] shader/Normal.vert 465 0
[System] shader/Panorama.vert 192 0
[System] shader/PointShadow.frag 82 0
[System] shader/PointShadow.geom 601 0
[System] shader/PointShadow.vert 403 0
[System] shader/Reflection.frag 163 0
[System] shader/Reflection.vert 514 0
[System] shader/Sky.frag 340 0
[System] shader/Sky.vert 328 0
[System] shader/Texture.frag 510 0
[System] shader/Texture.vert 247 0
[System] shader/Toon.frag 171 0
[System] shader/Toon.vert 514 0
[System] template/2D/StandardScene.json 151 0
[System] template/3D/FirstPerson.json 150 0
[System] template/3D/Platfrom.json 143 0
[System] template/3D/StandardScene/Scene.json 363 0
[System] template/3D/StandardScene.json 151 0
[System] template/3D/Strategy.json 143 0
[System] template/3D/ThirdPerson.json 150 0
[System] template/3D/Topdown.json 142 0
[System] template/Animation/StandardScene.json 158 0
[System] template/templates.json 592 0
[System] Manifest.json 889 0
[System] Zip content: Manifest.json, 889
[System] Zip content: fonts/OpenSans-Bold.ttf, 129784
[System] Zip content: fonts/OpenSans-BoldItalic.ttf, 135108
[System] Zip content: fonts/OpenSans-ExtraBold.ttf, 130180
[System] Zip content: fonts/OpenSans-ExtraBoldItalic.ttf, 135688
[System] Zip content: fonts/OpenSans-Italic.ttf, 135380
[System] Zip content: fonts/OpenSans-Light.ttf, 129756
[System] Zip content: fonts/OpenSans-LightItalic.ttf, 135668
[System] Zip content: fonts/OpenSans-Medium.ttf, 129948
[System] Zip content: fonts/OpenSans-MediumItalic.ttf, 135556
[System] Zip content: fonts/OpenSans-Regular.ttf, 129796
[System] Zip content: fonts/OpenSans-SemiBold.ttf, 129716
[System] Zip content: fonts/OpenSans-SemiBoldItalic.ttf, 135512
[System] Zip content: icon/arrow.png, 678
[System] Zip content: icon/audio.png, 3176
[System] Zip content: icon/audiowave.png, 354
[System] Zip content: icon/camera.png, 2534
[System] Zip content: icon/close.png, 1055
[System] Zip content: icon/colorwheel.png, 3974
[System] Zip content: icon/icons8-3d-model-96.png, 1893
[System] Zip content: icon/icons8-copy-to-clipboard-96.png, 1378
[System] Zip content: icon/icons8-cut-96.png, 3700
[System] Zip content: icon/icons8-delete-96.png, 1212
[System] Zip content: icon/icons8-document-96.png, 476
[System] Zip content: icon/icons8-done-96.png, 982
[System] Zip content: icon/icons8-doughnut-chart-96.png, 2588
[System] Zip content: icon/icons8-edit-96.png, 1293
[System] Zip content: icon/icons8-feed-in-96.png, 1571
[System] Zip content: icon/icons8-file-explorer-96.png, 805
[System] Zip content: icon/icons8-game-controller-96.png, 3156
[System] Zip content: icon/icons8-help-96.png, 2753
[System] Zip content: icon/icons8-info-96.png, 2059
[System] Zip content: icon/icons8-json-96.png, 1963
[System] Zip content: icon/icons8-key-96.png, 1397
[System] Zip content: icon/icons8-landscape-96.png, 1813
[System] Zip content: icon/icons8-layers-96.png, 1822
[System] Zip content: icon/icons8-light-96.png, 2441
[System] Zip content: icon/icons8-load-from-file-96.png, 928
[System] Zip content: icon/icons8-loading-circle.gif, 18791
[System] Zip content: icon/icons8-lock-96.png, 1512
[System] Zip content: icon/icons8-menu-96.png, 215
[System] Zip content: icon/icons8-mute-96.png, 1147
[System] Zip content: icon/icons8-notification-96.png, 2102
[System] Zip content: icon/icons8-opened-folder-96.png, 1064
[System] Zip content: icon/icons8-paste-96.png, 1282
[System] Zip content: icon/icons8-pause-96.png, 236
[System] Zip content: icon/icons8-play-96.png, 393
[System] Zip content: icon/icons8-project-management-96.png, 4818
[System] Zip content: icon/icons8-refresh-96.png, 2261
[System] Zip content: icon/icons8-refresh.gif, 26861
[System] Zip content: icon/icons8-sand-clock-96.png, 1902
[System] Zip content: icon/icons8-save-96.png, 695
[System] Zip content: icon/icons8-screenshot-96.png, 1535
[System] Zip content: icon/icons8-services-96.png, 2929
[System] Zip content: icon/icons8-settings-96.png, 3621
[System] Zip content: icon/icons8-source-code-96.png, 2546
[System] Zip content: icon/icons8-stop-96.png, 228
[System] Zip content: icon/icons8-synchronize-96.png, 2897
[System] Zip content: icon/icons8-synchronize.gif, 65737
[System] Zip content: icon/icons8-tree-structure-96.png, 681
[System] Zip content: icon/icons8-unavailable-96.png, 2372
[System] Zip content: icon/icons8-upload-to-the-cloud-96.png, 1473
[System] Zip content: icon/icons8-upload-to-the-cloud.gif, 28242
[System] Zip content: image/Default.png, 165263
[System] Zip content: image/Grid.png, 163868
[System] Zip content: image/sky/back.jpg, 740068
[System] Zip content: image/sky/bottom.jpg, 280589
[System] Zip content: image/sky/front.jpg, 473329
[System] Zip content: image/sky/left.jpg, 601885
[System] Zip content: image/sky/right.jpg, 538038
[System] Zip content: image/sky/top.jpg, 346139
[System] Zip content: lang/en/commom.xml, 385
[System] Zip content: lang/en/editor.xml, 153
[System] Zip content: lang/en/error.xml, 148
[System] Zip content: lang/en/material.xml, 63
[System] Zip content: lang/en/sceneobject.xml, 38
[System] Zip content: lang/en/shader.xml, 38
[System] Zip content: material/DefaultSky.json, 1324
[System] Zip content: mesh/Cone.mtl, 124
[System] Zip content: mesh/Cone.obj, 4426
[System] Zip content: mesh/Cube.mtl, 229
[System] Zip content: mesh/Cube.obj, 951
[System] Zip content: mesh/Cylinder.mtl, 124
[System] Zip content: mesh/Cylinder.obj, 7387
[System] Zip content: mesh/Monkey.mtl, 124
[System] Zip content: mesh/Monkey.obj, 63088
[System] Zip content: mesh/Plane.mtl, 124
[System] Zip content: mesh/Plane.obj, 353
[System] Zip content: mesh/Quad.mtl, 124
[System] Zip content: mesh/Quad.obj, 365
[System] Zip content: mesh/Sphere.mtl, 124
[System] Zip content: mesh/Sphere.obj, 62254
[System] Zip content: shader/Blinn.frag, 2125
[System] Zip content: shader/Blinn.vert, 736
[System] Zip content: shader/Color.frag, 387
[System] Zip content: shader/Color.vert, 463
[System] Zip content: shader/DefaultPostProcess.frag, 435
[System] Zip content: shader/DefaultPostProcess.vert, 227
[System] Zip content: shader/DirectionalShadow.frag, 82
[System] Zip content: shader/DirectionalShadow.vert, 403
[System] Zip content: shader/Error.frag, 221
[System] Zip content: shader/Error.vert, 231
[System] Zip content: shader/GGX.frag, 171
[System] Zip content: shader/GGX.vert, 710
[System] Zip content: shader/Lambert.frag, 1892
[System] Zip content: shader/Lambert.vert, 736
[System] Zip content: shader/Normal.frag, 314
[System] Zip content: shader/Normal.vert, 465
[System] Zip content: shader/Panorama.vert, 192
[System] Zip content: shader/PointShadow.frag, 82
[System] Zip content: shader/PointShadow.geom, 601
[System] Zip content: shader/PointShadow.vert, 403
[System] Zip content: shader/Reflection.frag, 163
[System] Zip content: shader/Reflection.vert, 514
[System] Zip content: shader/Sky.frag, 340
[System] Zip content: shader/Sky.vert, 328
[System] Zip content: shader/Texture.frag, 510
[System] Zip content: shader/Texture.vert, 247
[System] Zip content: shader/Toon.frag, 171
[System] Zip content: shader/Toon.vert, 514
[System] Zip content: shader/base/Light.glsl, 2126
[System] Zip content: shader/base/Model.glsl, 317
[System] Zip content: shader/base/Utility.glsl, 87
[System] Zip content: template/2D/StandardScene.json, 151
[System] Zip content: template/3D/FirstPerson.json, 150
[System] Zip content: template/3D/Platfrom.json, 143
[System] Zip content: template/3D/StandardScene.json, 151
[System] Zip content: template/3D/StandardScene/Scene.json, 363
[System] Zip content: template/3D/Strategy.json, 143
[System] Zip content: template/3D/ThirdPerson.json, 150
[System] Zip content: template/3D/Topdown.json, 142
[System] Zip content: template/Animation/StandardScene.json, 158
[System] Zip content: template/templates.json, 592
[System] Load buildin package version: 1.0.0
[System] Add package: buildin
[System] 
[System] GLFW version: 4.6
[System] GLSL version: #version 460
[System] 	GLFW_RESIZABLE: GLFW_TRUE
[System] 	GLFW_VISIBLE: GLFW_TRUE
[System] 	GLFW_DECORATED: GLFW_TRUE
[System] 	GLFW_FOCUSED: GLFW_TRUE
[System] 	GLFW_AUTO_ICONIFY: GLFW_TRUE
[System] 	GLFW_FLOATING: GLFW_FALSE
[System] 	GLFW_MAXIMIZED: GLFW_FALSE
[System] 	GLFW_CENTER_CURSOR: GLFW_TRUE
[System] 	GLFW_TRANSPARENT_FRAMEBUFFER: GLFW_FALSE
[System] 	GLFW_FOCUS_ON_SHOW: GLFW_TRUE
[System] 	GLFW_SCALE_TO_MONITOR: GLFW_FALSE
[System] 	glfwSetWindowPos: 100x100
[System] 	have_limit: True
[System] 		minimum_size: 800x600, have: TRUE
[System] 		maximum_size: 0x0, have: FALSE
[System] 	have_aspect_ratio: False
[System] 		aspect_ratio: 0x0
[System] Window created
[System] Glad initialized
[System] Declara uni content, name: view, size: 64, offset: 0
[System] Declara uni content, name: projection, size: 64, offset: 64
[System] Declara uni content, name: delta, size: 4, offset: 0
[System] Declara uni content, name: time, size: 4, offset: 4
[System] Declara uni content, name: ambient, size: 16, offset: 12
[System] Declara uni content, name: eye, size: 12, offset: 0
[System] Declara uni content, name: light[0].lightType, size: 4, offset: 32
[System] Declara uni content, name: light[0].position, size: 12, offset: 48
[System] Declara uni content, name: light[0].color, size: 16, offset: 64
[System] Declara uni content, name: light[0].direction, size: 12, offset: 80
[System] Declara uni content, name: light[1].lightType, size: 4, offset: 96
[System] Declara uni content, name: light[1].position, size: 12, offset: 112
[System] Declara uni content, name: light[1].color, size: 16, offset: 128
[System] Declara uni content, name: light[1].direction, size: 12, offset: 144
[System] Declara uni content, name: light[2].lightType, size: 4, offset: 160
[System] Declara uni content, name: light[2].position, size: 12, offset: 176
[System] Declara uni content, name: light[2].color, size: 16, offset: 192
[System] Declara uni content, name: light[2].direction, size: 12, offset: 208
[System] Declara uni content, name: light[3].lightType, size: 4, offset: 224
[System] Declara uni content, name: light[3].position, size: 12, offset: 240
[System] Declara uni content, name: light[3].color, size: 16, offset: 256
[System] Declara uni content, name: light[3].direction, size: 12, offset: 272
[System] Declara uni content, name: lightMat[0].lightPos, size: 12, offset: 64
[System] Declara uni content, name: lightMat[0].lightSpaceMatrix, size: 64, offset: 0
[System] Declara uni content, name: lightMat[1].lightPos, size: 12, offset: 144
[System] Declara uni content, name: lightMat[1].lightSpaceMatrix, size: 64, offset: 80
[System] Declara uni content, name: lightMat[2].lightPos, size: 12, offset: 224
[System] Declara uni content, name: lightMat[2].lightSpaceMatrix, size: 64, offset: 160
[System] Declara uni content, name: lightMat[3].lightPos, size: 12, offset: 304
[System] Declara uni content, name: lightMat[3].lightSpaceMatrix, size: 64, offset: 240
[System] shader/base/Utility.glsl
[System] Add new shader library: base/Utility.glsl 
layout (std140, binding = 0) uniform Utility {
	float delta;
	float time;
} utility;
[System] shader/base/Model.glsl
[System] Add new shader library: base/Model.glsl 
#define mvp modelMatrix.projection * modelMatrix.view * aMatrix
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTex;
layout (location = 3) in mat4 aMatrix;
layout (std140, binding = 1) uniform ModelMatrix {
	mat4 view;
	mat4 projection;
} modelMatrix;
[System] shader/base/Light.glsl
[System] Add new shader library: base/Light.glsl 
struct LightMat{
	mat4 lightSpaceMatrix;
	vec3 lightPos;
};

struct Light {
	int lightType;
	vec3 position;
	vec4 color;
	vec3 direction;
};

layout (std140, binding = 2) uniform LightMatrix {
	LightMat lightMat[4];
} lightMatrix;

layout (std140, binding = 3) uniform LightingData {
	vec3 eye;
	vec4 ambient;
	Light light[4];
} lightData;

layout (binding = 0) uniform sampler2D shadows_0;
layout (binding = 1) uniform sampler2D shadows_1;
layout (binding = 2) uniform sampler2D shadows_2;
layout (binding = 3) uniform sampler2D shadows_3;

float ShadowCalculation(vec3 lightPos, sampler2D shadowMap, vec4 fragPosLightSpace, vec3 Normal, vec3 FragPos)
{
    // perform perspective divide
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    // transform to [0,1] range
    projCoords = projCoords * 0.5 + 0.5;
    // get closest depth value from light's perspective (using [0,1] range fragPosLight as coords)
    float closestDepth = texture(shadowMap, projCoords.xy).r; 
    // get depth of current fragment from light's perspective
    float currentDepth = projCoords.z;
    vec3 lightDir = normalize(lightPos - FragPos);
    float bias = max(0.05 * (1.0 - dot(Normal, lightDir)), 0.005);
    // check whether current frag pos is in shadow
    float shadow = currentDepth - bias > closestDepth  ? 1.0 : 0.0;
    // PCF
    // float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMap, 0);
    for(int x = -1; x <= 1; ++x)
    {
        for(int y = -1; y <= 1; ++y)
        {
            float pcfDepth = texture(shadowMap, projCoords.xy + vec2(x, y) * texelSize).r; 
            shadow += currentDepth - bias > pcfDepth  ? 1.0 : 0.0;        
        }    
    }
    shadow /= 9.0;
    
    // keep the shadow at 0.0 when outside the far_plane region of the light's frustum.
    if(projCoords.z > 1.0)
        shadow = 0.0;
        
    return shadow;
}

sampler2D GetShadowDepth(int index){
	if(index == 0) return shadows_0;
	else if(index == 1) return shadows_1;
	else if(index == 2) return shadows_2;
	else return shadows_3;
}
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Error VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Error FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
layout (location = 0) out vec4 diffuseColor;

void main()
{
	diffuseColor = vec4(1.0, 0.0, 1.0, 1.0);
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Error
[System] Print shader uniform: Error
[System] 	Uniform:
[System] 	Uniform block:
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 0
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 1
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Error
[System] 	Material callback register!
[System] Update material uniform block: Error Mat
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Color VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"

layout (location = 4) out VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} vs_out;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	vs_out.FragPos = vec3(aMatrix * vec4(aPos, 1.0));
	vs_out.Tex = aTex;
	vs_out.Normal = mat3(transpose(inverse(aMatrix))) * aNormal;
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Color FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable

layout (location = 0) out vec4 diffuseColor;
layout (location = 4) in VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} vs_in;
layout (binding = 5) uniform ColorData {
	vec3 color;
} colorData;

void main()
{
	diffuseColor = vec4(colorData.color, 1.0);
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Color
[System] Print shader uniform: Color
[System] 	Uniform:
[System] 	Uniform block:
[System] 		Uniform block name: ColorData
[System] 		Uniform block size: 16
[System] 		Uniform block index: 0
[System] 			Uniform name: ColorData.color
[System] 			type: vec3
[System] 			Varaible name: color
[System] 			size: 12
[System] 			location: 0
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 1
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 2
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Color
[System] 	Material callback register!
[System] Update material uniform block: Color Mat
[System] Declara uni content, name: color, size: 12, offset: 0
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Normal VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"

layout (location = 4) out VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} vs_out;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	vs_out.FragPos = vec3(aMatrix * vec4(aPos, 1.0));
	vs_out.Tex = aTex;
	vs_out.Normal = mat3(transpose(inverse(aMatrix))) * aNormal;
}

[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Normal FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable

layout (location = 0) out vec4 diffuseColor;
layout (location = 4) in VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} fs_in;

void main()
{
	diffuseColor = vec4(fs_in.Normal, 1.0);
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Normal
[System] Print shader uniform: Normal
[System] 	Uniform:
[System] 	Uniform block:
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 0
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 1
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Normal
[System] 	Material callback register!
[System] Update material uniform block: Normal Mat
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Reflection VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 450
#define mvp modelMatrix.projection * modelMatrix.view * modelMatrix.model
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTex;
layout (location = 3) out vec2 Tex;
layout (std140, binding = 0) uniform Utility{
	float delta;
	float time;
} utility;
layout (std140, binding = 1) uniform ModelMatrix {
	mat4 model;
	mat4 view;
	mat4 projection;
} modelMatrix;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	Tex = aTex;
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Reflection FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 450
layout(location = 3) in vec2 Tex;
layout(location = 4) out vec4 FragColor;

uniform vec3 color;
void main()
{
	FragColor = vec4(color, 1.0);
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Reflection
[System] Print shader uniform: Reflection
[System] 	Uniform:
[System] 		Uniform name: color
[System] 		type: vec3
[System] 		Varaible name: color
[System] 		size: 12
[System] 		location: 0
[System] 	Uniform block:
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 192
[System] 		Uniform block index: 0
[System] 			Uniform name: ModelMatrix.model
[System] 			type: mat4
[System] 			Varaible name: model
[System] 			size: 64
[System] 			location: 0
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 128
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 64
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 1
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Reflection
[System] 	Material callback register!
[System] Update material uniform block: Reflection Mat
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... DirectionalShadow VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 450
#define mvp modelMatrix.projection * modelMatrix.view * aMatrix
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTex;
layout (location = 3) in mat4 aMatrix;
layout (std140, binding = 2) uniform DepthData {
	mat4 lightMatrix;
} depthData;

void main()
{
	gl_Position = depthData.lightMatrix * aMatrix * vec4(aPos, 1.0);
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... DirectionalShadow FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 450

void main()
{             
    gl_FragDepth = gl_FragCoord.z;
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: DirectionalShadow
[System] Print shader uniform: DirectionalShadow
[System] 	Uniform:
[System] 	Uniform block:
[System] 		Uniform block name: DepthData
[System] 		Uniform block size: 64
[System] 		Uniform block index: 0
[System] 			Uniform name: DepthData.lightMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMatrix
[System] 			size: 64
[System] 			location: 0
[System] Material created!
[System] 	Material use shader: DirectionalShadow
[System] 	Material callback register!
[System] Update material uniform block: DirectionalShadow Mat
[System] Declara uni content, name: lightMatrix, size: 64, offset: 0
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] Import shader GEOMETRY code, size: 8
[System] 
[System] Compile Shader... PointShadow VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#define mvp modelMatrix.projection * modelMatrix.view * aMatrix
layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;
layout (location = 2) in vec2 aTex;
layout (location = 3) in mat4 aMatrix;
layout (std140, binding = 2) uniform DepthData {
	mat4 lightMatrix;
} depthData;

void main()
{
	gl_Position = depthData.lightMatrix * aMatrix * vec4(aPos, 1.0);
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... PointShadow FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430

void main()
{             
    gl_FragDepth = gl_FragCoord.z;
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] 
[System] Compile Shader... PointShadow GEOMETRY
[System] #########################################################
[System] #			GEOMETRY start			#
[System] #########################################################
[System] 
[System] #version 430 core
layout (triangles) in;
layout (triangle_strip, max_vertices=18) out;

uniform mat4 shadowMatrices[6];

out vec4 FragPos; // FragPos from GS (output per emitvertex)

void main()
{
    for(int face = 0; face < 6; ++face)
    {
        gl_Layer = face; // built-in variable that specifies to which face we render.
        for(int i = 0; i < 3; ++i) // for each triangle's vertices
        {
            FragPos = gl_in[i].gl_Position;
            gl_Position = shadowMatrices[face] * FragPos;
            EmitVertex();
        }    
        EndPrimitive();
    }
} 
[System] 
[System] #########################################################
[System] #			GEOMETRY end			#
[System] #########################################################
[System] Form uniform data: PointShadow
[System] Print shader uniform: PointShadow
[System] 	Uniform:
[System] 		Uniform name: shadowMatrices[0]
[System] 		type: mat4
[System] 		Varaible name: shadowMatrices[0]
[System] 		size: 64
[System] 		location: 0
[System] 	Uniform block:
[System] 		Uniform block name: DepthData
[System] 		Uniform block size: 64
[System] 		Uniform block index: 0
[System] 			Uniform name: DepthData.lightMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMatrix
[System] 			size: 64
[System] 			location: 0
[System] Material created!
[System] 	Material use shader: PointShadow
[System] 	Material callback register!
[System] Update material uniform block: PointShadow Mat
[System] Declara uni content, name: lightMatrix, size: 64, offset: 0
[System] 	Adding material to pool!
[System] GetUniformNameDetail: 'ColorData' 'color'
[System] ImGui Initialized
[System] Register events...
[System] Register events finished
[System] Imgui gui version: 1.87 WIP
[System] Create scene
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Color VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"

layout (location = 4) out VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} vs_out;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	vs_out.FragPos = vec3(aMatrix * vec4(aPos, 1.0));
	vs_out.Tex = aTex;
	vs_out.Normal = mat3(transpose(inverse(aMatrix))) * aNormal;
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Color FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable

layout (location = 0) out vec4 diffuseColor;
layout (location = 4) in VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
} vs_in;
layout (binding = 5) uniform ColorData {
	vec3 color;
} colorData;

void main()
{
	diffuseColor = vec4(colorData.color, 1.0);
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Color
[System] Print shader uniform: Color
[System] 	Uniform:
[System] 	Uniform block:
[System] 		Uniform block name: ColorData
[System] 		Uniform block size: 16
[System] 		Uniform block index: 0
[System] 			Uniform name: ColorData.color
[System] 			type: vec3
[System] 			Varaible name: color
[System] 			size: 12
[System] 			location: 0
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 1
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 2
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Color
[System] 	Material callback register!
[System] Update material uniform block: Color Mat
[System] Declara uni content, name: color, size: 12, offset: 0
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Lambert VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"
#include "/base/Light.glsl"

layout (location = 4) out VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
	vec3 LightPos[4];
	vec4 FragPosLightSpace[4];
} vs_out;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	vs_out.FragPos = vec3(aMatrix * vec4(aPos, 1.0));
	vs_out.Tex = aTex;
	vs_out.Normal = mat3(transpose(inverse(aMatrix))) * aNormal;
	for(int i = 0; i < 4; i++){
		vs_out.FragPosLightSpace[i] = lightMatrix.lightMat[i].lightSpaceMatrix * vec4(vs_out.FragPos, 1.0);
		vs_out.LightPos[i] = lightMatrix.lightMat[i].lightPos;
	}
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Lambert FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Light.glsl"

layout (location = 0) out vec4 diffuseColor;
layout (location = 4) in VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
	vec3 LightPos[4];
	vec4 FragPosLightSpace[4];
} fs_in;

layout (binding = 4) uniform TextureData {
	vec2 offset;
	vec2 scale;
	vec3 tint;
} textureData;

layout (binding = 4) uniform sampler2D surface;

void main()
{
	vec3 ambient = lightData.ambient.xyz * lightData.ambient.w;

	vec3 diffuse = vec3(0.0);
	float sha = 0;
	vec3 viewDir = normalize(lightData.eye - fs_in.FragPos);
	float specularStrength = 0.5;

	for (int i = 0; i < 4; i++) {
		Light li = lightData.light[i];
		vec3 lightDir = normalize(li.position - fs_in.FragPos);

		if(li.lightType == 0){
			// Direction
			float difu = max(dot(fs_in.Normal, normalize(li.direction)), 0.0);
			diffuse += li.color.xyz * li.color.w * difu;
			sha += ShadowCalculation(fs_in.LightPos[i], GetShadowDepth(i), fs_in.FragPosLightSpace[i], fs_in.Normal, fs_in.FragPos);
		}else if(li.lightType == 1){
			// Point
			float dis = distance(li.position, fs_in.FragPos);
			float attenuation = 1.0 / (1.0 + 0.09 * dis + 
    		    0.032 * (dis * dis));
			float difu = max(dot(fs_in.Normal, normalize(li.position - fs_in.FragPos)), 0.0);
			diffuse += li.color.xyz * li.color.w * difu * attenuation;
		}else if(li.lightType == 2){
			// Spot
		}
	}
	sha = max(1.0, sha);

	vec2 actualTex = (fs_in.Tex + textureData.offset) * textureData.scale;
	vec4 texColor = texture(surface, actualTex);
	//diffuseColor = vec4(ambient + diffuse + spec, 1.0) * texColor;
	diffuseColor = vec4(ambient + (1.0 - (sha * 0.5)) * diffuse, 1.0) * texColor;
	//diffuseColor = vec4(vec3(fs_in.FragPosLightSpace[1]), 1.0);
	//diffuseColor = texColor;
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Lambert
[System] Print shader uniform: Lambert
[System] 	Uniform:
[System] 		Uniform name: shadows_0
[System] 		type: sampler2D
[System] 		Varaible name: shadows_0
[System] 		size: 0
[System] 		location: 0
[System] 		Uniform name: shadows_1
[System] 		type: sampler2D
[System] 		Varaible name: shadows_1
[System] 		size: 0
[System] 		location: 1
[System] 		Uniform name: shadows_2
[System] 		type: sampler2D
[System] 		Varaible name: shadows_2
[System] 		size: 0
[System] 		location: 2
[System] 		Uniform name: shadows_3
[System] 		type: sampler2D
[System] 		Varaible name: shadows_3
[System] 		size: 0
[System] 		location: 3
[System] 		Uniform name: surface
[System] 		type: sampler2D
[System] 		Varaible name: surface
[System] 		size: 0
[System] 		location: 4
[System] 	Uniform block:
[System] 		Uniform block name: LightMatrix
[System] 		Uniform block size: 320
[System] 		Uniform block index: 0
[System] 			Uniform name: LightMatrix.lightMat[0].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[0].lightPos
[System] 			size: 12
[System] 			location: 64
[System] 			Uniform name: LightMatrix.lightMat[0].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[0].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 0
[System] 			Uniform name: LightMatrix.lightMat[1].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[1].lightPos
[System] 			size: 12
[System] 			location: 144
[System] 			Uniform name: LightMatrix.lightMat[1].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[1].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 80
[System] 			Uniform name: LightMatrix.lightMat[2].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[2].lightPos
[System] 			size: 12
[System] 			location: 224
[System] 			Uniform name: LightMatrix.lightMat[2].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[2].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 160
[System] 			Uniform name: LightMatrix.lightMat[3].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[3].lightPos
[System] 			size: 12
[System] 			location: 304
[System] 			Uniform name: LightMatrix.lightMat[3].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[3].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 240
[System] 		Uniform block name: LightingData
[System] 		Uniform block size: 288
[System] 		Uniform block index: 1
[System] 			Uniform name: LightingData.ambient
[System] 			type: vec4
[System] 			Varaible name: ambient
[System] 			size: 16
[System] 			location: 16
[System] 			Uniform name: LightingData.eye
[System] 			type: vec3
[System] 			Varaible name: eye
[System] 			size: 12
[System] 			location: 0
[System] 			Uniform name: LightingData.light[0].color
[System] 			type: vec4
[System] 			Varaible name: light[0].color
[System] 			size: 16
[System] 			location: 64
[System] 			Uniform name: LightingData.light[0].direction
[System] 			type: vec3
[System] 			Varaible name: light[0].direction
[System] 			size: 12
[System] 			location: 80
[System] 			Uniform name: LightingData.light[0].lightType
[System] 			type: int
[System] 			Varaible name: light[0].lightType
[System] 			size: 4
[System] 			location: 32
[System] 			Uniform name: LightingData.light[0].position
[System] 			type: vec3
[System] 			Varaible name: light[0].position
[System] 			size: 12
[System] 			location: 48
[System] 			Uniform name: LightingData.light[1].color
[System] 			type: vec4
[System] 			Varaible name: light[1].color
[System] 			size: 16
[System] 			location: 128
[System] 			Uniform name: LightingData.light[1].direction
[System] 			type: vec3
[System] 			Varaible name: light[1].direction
[System] 			size: 12
[System] 			location: 144
[System] 			Uniform name: LightingData.light[1].lightType
[System] 			type: int
[System] 			Varaible name: light[1].lightType
[System] 			size: 4
[System] 			location: 96
[System] 			Uniform name: LightingData.light[1].position
[System] 			type: vec3
[System] 			Varaible name: light[1].position
[System] 			size: 12
[System] 			location: 112
[System] 			Uniform name: LightingData.light[2].color
[System] 			type: vec4
[System] 			Varaible name: light[2].color
[System] 			size: 16
[System] 			location: 192
[System] 			Uniform name: LightingData.light[2].direction
[System] 			type: vec3
[System] 			Varaible name: light[2].direction
[System] 			size: 12
[System] 			location: 208
[System] 			Uniform name: LightingData.light[2].lightType
[System] 			type: int
[System] 			Varaible name: light[2].lightType
[System] 			size: 4
[System] 			location: 160
[System] 			Uniform name: LightingData.light[2].position
[System] 			type: vec3
[System] 			Varaible name: light[2].position
[System] 			size: 12
[System] 			location: 176
[System] 			Uniform name: LightingData.light[3].color
[System] 			type: vec4
[System] 			Varaible name: light[3].color
[System] 			size: 16
[System] 			location: 256
[System] 			Uniform name: LightingData.light[3].direction
[System] 			type: vec3
[System] 			Varaible name: light[3].direction
[System] 			size: 12
[System] 			location: 272
[System] 			Uniform name: LightingData.light[3].lightType
[System] 			type: int
[System] 			Varaible name: light[3].lightType
[System] 			size: 4
[System] 			location: 224
[System] 			Uniform name: LightingData.light[3].position
[System] 			type: vec3
[System] 			Varaible name: light[3].position
[System] 			size: 12
[System] 			location: 240
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 2
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: TextureData
[System] 		Uniform block size: 48
[System] 		Uniform block index: 3
[System] 			Uniform name: TextureData.offset
[System] 			type: vec2
[System] 			Varaible name: offset
[System] 			size: 8
[System] 			location: 0
[System] 			Uniform name: TextureData.scale
[System] 			type: vec2
[System] 			Varaible name: scale
[System] 			size: 8
[System] 			location: 8
[System] 			Uniform name: TextureData.tint
[System] 			type: vec3
[System] 			Varaible name: tint
[System] 			size: 12
[System] 			location: 16
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 4
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Lambert
[System] 	Material callback register!
[System] Update material uniform block: Lambert Mat
[System] Declara uni content, name: lightMat[0].lightPos, size: 12, offset: 64
[System] Declara uni content, name: lightMat[0].lightSpaceMatrix, size: 64, offset: 0
[System] Declara uni content, name: lightMat[1].lightPos, size: 12, offset: 144
[System] Declara uni content, name: lightMat[1].lightSpaceMatrix, size: 64, offset: 80
[System] Declara uni content, name: lightMat[2].lightPos, size: 12, offset: 224
[System] Declara uni content, name: lightMat[2].lightSpaceMatrix, size: 64, offset: 160
[System] Declara uni content, name: lightMat[3].lightPos, size: 12, offset: 304
[System] Declara uni content, name: lightMat[3].lightSpaceMatrix, size: 64, offset: 240
[System] Declara uni content, name: offset, size: 8, offset: 0
[System] Declara uni content, name: scale, size: 8, offset: 8
[System] Declara uni content, name: tint, size: 12, offset: 16
[System] 	Adding material to pool!
[System] Shader created!
[System] 	Shader pool add!
[System] Import shader VERTEX code, size: 8
[System] Import shader FRAGMENT code, size: 8
[System] 
[System] Compile Shader... Blinn VERTEX
[System] #########################################################
[System] #			VERTEX start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Utility.glsl"
#include "/base/Model.glsl"
#include "/base/Light.glsl"

layout (location = 4) out VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
	vec3 LightPos[4];
	vec4 FragPosLightSpace[4];
} vs_out;

void main()
{
	gl_Position = mvp * vec4(aPos, 1.0);
	vs_out.FragPos = vec3(aMatrix * vec4(aPos, 1.0));
	vs_out.Tex = aTex;
	vs_out.Normal = mat3(transpose(inverse(aMatrix))) * aNormal;
	for(int i = 0; i < 4; i++){
		vs_out.FragPosLightSpace[i] = lightMatrix.lightMat[i].lightSpaceMatrix * vec4(vs_out.FragPos, 1.0);
		vs_out.LightPos[i] = lightMatrix.lightMat[i].lightPos;
	}
}
[System] 
[System] #########################################################
[System] #			VERTEX end			#
[System] #########################################################
[System] 
[System] Compile Shader... Blinn FRAGMENT
[System] #########################################################
[System] #			FRAGMENT start			#
[System] #########################################################
[System] 
[System] #version 430
#extension GL_ARB_shading_language_include : require
#extension GL_ARB_enhanced_layouts : enable
#include "/base/Light.glsl"

layout (location = 0) out vec4 diffuseColor;
layout (location = 4) in VertexData {
	vec3 FragPos;
	vec2 Tex;
	vec3 Normal;
	vec3 LightPos[4];
	vec4 FragPosLightSpace[4];
} fs_in;

layout (binding = 4) uniform TextureData {
	vec2 offset;
	vec2 scale;
	vec3 tint;
} textureData;

layout (binding = 4) uniform sampler2D surface;

void main()
{
	vec3 ambient = lightData.ambient.xyz * lightData.ambient.w;

	vec3 diffuse = vec3(0.0);
	vec3 spec = vec3(0.0);
	float sha = 0;
	vec3 viewDir = normalize(lightData.eye - fs_in.FragPos);
	float specularStrength = 0.5;

	for (int i = 0; i < 4; i++) {
		Light li = lightData.light[i];
		vec3 lightDir = normalize(li.position - fs_in.FragPos);

		if(li.lightType == 0){
			// Direction
			float difu = max(dot(fs_in.Normal, normalize(li.direction)), 0.0);
			diffuse += li.color.xyz * li.color.w * difu;
			sha += ShadowCalculation(fs_in.LightPos[i], GetShadowDepth(i), fs_in.FragPosLightSpace[i], fs_in.Normal, fs_in.FragPos);
		}else if(li.lightType == 1){
			// Point
			float dis = distance(li.position, fs_in.FragPos);
			float attenuation = 1.0 / (1.0 + 0.09 * dis + 
    		    0.032 * (dis * dis));
			float difu = max(dot(fs_in.Normal, normalize(li.position - fs_in.FragPos)), 0.0);
			diffuse += li.color.xyz * li.color.w * difu * attenuation;

			vec3 reflectDir = reflect(-lightDir, fs_in.Normal);
			float spe = pow(max(dot(viewDir, reflectDir), 0.0), 32.0);
			spec += li.color.xyz * li.color.w * spe * specularStrength * attenuation;
		}else if(li.lightType == 2){
			// Spot
		}
	}
	sha = max(1.0, sha);

	vec2 actualTex = (fs_in.Tex + textureData.offset) * textureData.scale;
	vec4 texColor = texture(surface, actualTex);
	//diffuseColor = vec4(ambient + diffuse + spec, 1.0) * texColor;
	diffuseColor = vec4(ambient + (1.0 - (sha * 0.5)) * (diffuse + spec), 1.0) * texColor;
	//diffuseColor = vec4(vec3(fs_in.FragPosLightSpace[1]), 1.0);
	//diffuseColor = texColor;
}
[System] 
[System] #########################################################
[System] #			FRAGMENT end			#
[System] #########################################################
[System] Form uniform data: Blinn
[System] Print shader uniform: Blinn
[System] 	Uniform:
[System] 		Uniform name: shadows_0
[System] 		type: sampler2D
[System] 		Varaible name: shadows_0
[System] 		size: 0
[System] 		location: 0
[System] 		Uniform name: shadows_1
[System] 		type: sampler2D
[System] 		Varaible name: shadows_1
[System] 		size: 0
[System] 		location: 1
[System] 		Uniform name: shadows_2
[System] 		type: sampler2D
[System] 		Varaible name: shadows_2
[System] 		size: 0
[System] 		location: 2
[System] 		Uniform name: shadows_3
[System] 		type: sampler2D
[System] 		Varaible name: shadows_3
[System] 		size: 0
[System] 		location: 3
[System] 		Uniform name: surface
[System] 		type: sampler2D
[System] 		Varaible name: surface
[System] 		size: 0
[System] 		location: 4
[System] 	Uniform block:
[System] 		Uniform block name: LightMatrix
[System] 		Uniform block size: 320
[System] 		Uniform block index: 0
[System] 			Uniform name: LightMatrix.lightMat[0].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[0].lightPos
[System] 			size: 12
[System] 			location: 64
[System] 			Uniform name: LightMatrix.lightMat[0].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[0].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 0
[System] 			Uniform name: LightMatrix.lightMat[1].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[1].lightPos
[System] 			size: 12
[System] 			location: 144
[System] 			Uniform name: LightMatrix.lightMat[1].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[1].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 80
[System] 			Uniform name: LightMatrix.lightMat[2].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[2].lightPos
[System] 			size: 12
[System] 			location: 224
[System] 			Uniform name: LightMatrix.lightMat[2].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[2].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 160
[System] 			Uniform name: LightMatrix.lightMat[3].lightPos
[System] 			type: vec3
[System] 			Varaible name: lightMat[3].lightPos
[System] 			size: 12
[System] 			location: 304
[System] 			Uniform name: LightMatrix.lightMat[3].lightSpaceMatrix
[System] 			type: mat4
[System] 			Varaible name: lightMat[3].lightSpaceMatrix
[System] 			size: 64
[System] 			location: 240
[System] 		Uniform block name: LightingData
[System] 		Uniform block size: 288
[System] 		Uniform block index: 1
[System] 			Uniform name: LightingData.ambient
[System] 			type: vec4
[System] 			Varaible name: ambient
[System] 			size: 16
[System] 			location: 16
[System] 			Uniform name: LightingData.eye
[System] 			type: vec3
[System] 			Varaible name: eye
[System] 			size: 12
[System] 			location: 0
[System] 			Uniform name: LightingData.light[0].color
[System] 			type: vec4
[System] 			Varaible name: light[0].color
[System] 			size: 16
[System] 			location: 64
[System] 			Uniform name: LightingData.light[0].direction
[System] 			type: vec3
[System] 			Varaible name: light[0].direction
[System] 			size: 12
[System] 			location: 80
[System] 			Uniform name: LightingData.light[0].lightType
[System] 			type: int
[System] 			Varaible name: light[0].lightType
[System] 			size: 4
[System] 			location: 32
[System] 			Uniform name: LightingData.light[0].position
[System] 			type: vec3
[System] 			Varaible name: light[0].position
[System] 			size: 12
[System] 			location: 48
[System] 			Uniform name: LightingData.light[1].color
[System] 			type: vec4
[System] 			Varaible name: light[1].color
[System] 			size: 16
[System] 			location: 128
[System] 			Uniform name: LightingData.light[1].direction
[System] 			type: vec3
[System] 			Varaible name: light[1].direction
[System] 			size: 12
[System] 			location: 144
[System] 			Uniform name: LightingData.light[1].lightType
[System] 			type: int
[System] 			Varaible name: light[1].lightType
[System] 			size: 4
[System] 			location: 96
[System] 			Uniform name: LightingData.light[1].position
[System] 			type: vec3
[System] 			Varaible name: light[1].position
[System] 			size: 12
[System] 			location: 112
[System] 			Uniform name: LightingData.light[2].color
[System] 			type: vec4
[System] 			Varaible name: light[2].color
[System] 			size: 16
[System] 			location: 192
[System] 			Uniform name: LightingData.light[2].direction
[System] 			type: vec3
[System] 			Varaible name: light[2].direction
[System] 			size: 12
[System] 			location: 208
[System] 			Uniform name: LightingData.light[2].lightType
[System] 			type: int
[System] 			Varaible name: light[2].lightType
[System] 			size: 4
[System] 			location: 160
[System] 			Uniform name: LightingData.light[2].position
[System] 			type: vec3
[System] 			Varaible name: light[2].position
[System] 			size: 12
[System] 			location: 176
[System] 			Uniform name: LightingData.light[3].color
[System] 			type: vec4
[System] 			Varaible name: light[3].color
[System] 			size: 16
[System] 			location: 256
[System] 			Uniform name: LightingData.light[3].direction
[System] 			type: vec3
[System] 			Varaible name: light[3].direction
[System] 			size: 12
[System] 			location: 272
[System] 			Uniform name: LightingData.light[3].lightType
[System] 			type: int
[System] 			Varaible name: light[3].lightType
[System] 			size: 4
[System] 			location: 224
[System] 			Uniform name: LightingData.light[3].position
[System] 			type: vec3
[System] 			Varaible name: light[3].position
[System] 			size: 12
[System] 			location: 240
[System] 		Uniform block name: ModelMatrix
[System] 		Uniform block size: 128
[System] 		Uniform block index: 2
[System] 			Uniform name: ModelMatrix.projection
[System] 			type: mat4
[System] 			Varaible name: projection
[System] 			size: 64
[System] 			location: 64
[System] 			Uniform name: ModelMatrix.view
[System] 			type: mat4
[System] 			Varaible name: view
[System] 			size: 64
[System] 			location: 0
[System] 		Uniform block name: TextureData
[System] 		Uniform block size: 48
[System] 		Uniform block index: 3
[System] 			Uniform name: TextureData.offset
[System] 			type: vec2
[System] 			Varaible name: offset
[System] 			size: 8
[System] 			location: 0
[System] 			Uniform name: TextureData.scale
[System] 			type: vec2
[System] 			Varaible name: scale
[System] 			size: 8
[System] 			location: 8
[System] 			Uniform name: TextureData.tint
[System] 			type: vec3
[System] 			Varaible name: tint
[System] 			size: 12
[System] 			location: 16
[System] 		Uniform block name: Utility
[System] 		Uniform block size: 32
[System] 		Uniform block index: 4
[System] 			Uniform name: Utility.delta
[System] 			type: float
[System] 			Varaible name: delta
[System] 			size: 4
[System] 			location: 0
[System] 			Uniform name: Utility.time
[System] 			type: float
[System] 			Varaible name: time
[System] 			size: 4
[System] 			location: 4
[System] Material created!
[System] 	Material use shader: Blinn
[System] 	Material callback register!
[System] Update material uniform block: Blinn Mat
[System] Declara uni content, name: lightMat[0].lightPos, size: 12, offset: 64
[System] Declara uni content, name: lightMat[0].lightSpaceMatrix, size: 64, offset: 0
[System] Declara uni content, name: lightMat[1].lightPos, size: 12, offset: 144
[System] Declara uni content, name: lightMat[1].lightSpaceMatrix, size: 64, offset: 80
[System] Declara uni content, name: lightMat[2].lightPos, size: 12, offset: 224
[System] Declara uni content, name: lightMat[2].lightSpaceMatrix, size: 64, offset: 160
[System] Declara uni content, name: lightMat[3].lightPos, size: 12, offset: 304
[System] Declara uni content, name: lightMat[3].lightSpaceMatrix, size: 64, offset: 240
[System] Declara uni content, name: offset, size: 8, offset: 0
[System] Declara uni content, name: scale, size: 8, offset: 8
[System] Declara uni content, name: tint, size: 12, offset: 16
[System] 	Adding material to pool!
[System] GetUniformNameDetail: 'ColorData' 'color'
[System] GetUniformNameDetail: 'TextureData' 'offset'
[System] GetUniformNameDetail: 'TextureData' 'scale'
[System] GetUniformNameDetail: 'TextureData' 'tint'
[System] Import texture memory.
[System] Import texture file: .\temp\texture_import_temp.png
[System] Texture created!
[System] 	Import texture successfully: ".\temp\texture_import_temp.png"  "Default Texture"
[System] Apply texture ! Default Texture
[System] GetUniformNameDetail: 'TextureData' 'offset'
[System] GetUniformNameDetail: 'TextureData' 'scale'
[System] GetUniformNameDetail: 'TextureData' 'tint'
[System] Import texture memory.
[System] Import texture file: .\temp\texture_import_temp.png
[System] Texture created!
[System] 	Import texture successfully: ".\temp\texture_import_temp.png"  "Default Texture"
[System] Apply texture ! Default Texture
[System] Trying import mesh from memory
[System] Trying import mesh from: .\temp\mesh_import_temp
[System] Mesh created!
[System] 	Mesh pool add!
[System] 	Set mesh name mesh_import_temp
[System] 	mesh_import_temp Vertex register size: 1984
[System] 	mesh_import_temp Normal register size: 1984
[System] 	mesh_import_temp Textures register size: 1984
[System] 	mesh_import_temp Indices register size: 2880
[System] Mesh update start: mesh_import_temp
[System] min -1.000000, -1.000000, -1.000000
[System] max 1.000000, 1.000000, 1.000000
[System] Mesh update end: mesh_import_temp
[System] Trying import mesh from memory
[System] Trying import mesh from: .\temp\mesh_import_temp
[System] Mesh created!
[System] 	Mesh pool add!
[System] 	Set mesh name mesh_import_temp
[System] 	mesh_import_temp Vertex register size: 24
[System] 	mesh_import_temp Normal register size: 24
[System] 	mesh_import_temp Textures register size: 24
[System] 	mesh_import_temp Indices register size: 36
[System] Mesh update start: mesh_import_temp
[System] min -1.000000, -1.000000, -1.000000
[System] max 1.000000, 1.000000, 1.000000
[System] Mesh update end: mesh_import_temp
[System] Trying import mesh from memory
[System] Trying import mesh from: .\temp\mesh_import_temp
[System] Mesh created!
[System] 	Mesh pool add!
[System] 	Set mesh name mesh_import_temp
[System] 	mesh_import_temp Vertex register size: 4
[System] 	mesh_import_temp Normal register size: 4
[System] 	mesh_import_temp Textures register size: 4
[System] 	mesh_import_temp Indices register size: 6
[System] Mesh update start: mesh_import_temp
[System] min -1.000000, 0.000000, -1.000000
[System] max 1.000000, 0.000000, 1.000000
[System] Mesh update end: mesh_import_temp
[System] CP1
[System] Application exit !
[System] Texture asset size: 2
[System] Texture destroy! Default.png
[System] Texture destroy! Grid.png
[System] Mesh asset size: 3
[System] Material destroy! Error Mat
[System] 	Start destroy uniform blocks! Error Mat
[System] Shader destroy! Error
[System] 	Shader buffer destroy! Error
[System] Material destroy! Color Mat
[System] 	Start destroy uniform blocks! Color Mat
[System] Uniform block destroy! ColorData
[System] Shader destroy! Color
[System] 	Shader buffer destroy! Color
[System] Material destroy! Normal Mat
[System] 	Start destroy uniform blocks! Normal Mat
[System] Shader destroy! Normal
[System] 	Shader buffer destroy! Normal
[System] Material destroy! Reflection Mat
[System] 	Start destroy uniform blocks! Reflection Mat
[System] Shader destroy! Reflection
[System] 	Shader buffer destroy! Reflection
[System] Material destroy! DirectionalShadow Mat
[System] 	Start destroy uniform blocks! DirectionalShadow Mat
[System] Uniform block destroy! DepthData
[System] Shader destroy! DirectionalShadow
[System] 	Shader buffer destroy! DirectionalShadow
[System] Material destroy! PointShadow Mat
[System] 	Start destroy uniform blocks! PointShadow Mat
[System] Uniform block destroy! DepthData
[System] Shader destroy! PointShadow
[System] 	Shader buffer destroy! PointShadow
[System] Material destroy! Color Mat
[System] 	Start destroy uniform blocks! Color Mat
[System] Uniform block destroy! ColorData
[System] Shader destroy! Color
[System] 	Shader buffer destroy! Color
[System] Material destroy! Lambert Mat
[System] 	Start destroy uniform blocks! Lambert Mat
[System] Uniform block destroy! LightMatrix
[System] Uniform block destroy! TextureData
[System] Shader destroy! Lambert
[System] 	Shader buffer destroy! Lambert
[System] Material destroy! Blinn Mat
[System] 	Start destroy uniform blocks! Blinn Mat
[System] Uniform block destroy! LightMatrix
[System] Uniform block destroy! TextureData
[System] Shader destroy! Blinn
[System] 	Shader buffer destroy! Blinn
[System] Material asset size: 9
[System] Mesh destroy! Sphere.obj
[System] Mesh destroy! Cube.obj
[System] Mesh destroy! Plane.obj
[System] Framebuffer asset size: 3
[System] Framebuffer destroy! Default Asset
[System] Framebuffer destroy! Default Asset
[System] Framebuffer destroy! Default Asset
[System] Call shutdown event
[System] Shutdown ImGui context
[System] Delete glfw window
[System] Delete glfw terminate
